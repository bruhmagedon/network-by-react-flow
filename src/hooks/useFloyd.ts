import { getEdges } from '@/features/edge';
import { getNodes } from '@/features/node';
import { Edge, Node } from '@xyflow/react';
import { useSelector } from 'react-redux';
import { useHighlightEdges } from './useHighlightEdges';

export const useFloyd = () => {
  const nodes: Node[] = useSelector(getNodes);
  const edges: Edge[] = useSelector(getEdges);
  const { highlightPathEdges } = useHighlightEdges();

  const getNodeLabeForPath = (nodeId: string) => {
    if (nodeId === 'Null') {
      return 'Null';
    }
    const node = nodes.find((node) => node.id === nodeId);
    return (node?.data.label as string) || nodeId; // –ï—Å–ª–∏ —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID
  };

  // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –≤—Å–µ–º–∏ —É–∑–ª–∞–º–∏ –≥—Ä–∞—Ñ–∞ (distances),
  //  –º–∞—Ç—Ä–∏—Ü—É –ø—É—Ç–µ–π (next),
  const floydWarshall = (): { distances: number[][]; next: string[][]; debugString: string } => {
    const nodeCount = nodes.length; //nodeCount: –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ.
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π.
    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ (–∫—Ä–æ–º–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç —É–∑–ª–∞ –¥–æ —Å–∞–º–æ–≥–æ —Å–µ–±—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–∂–µ —Å—Ç–∞–Ω—É—Ç –Ω—É–ª—è–º–∏)
    const distances = Array(nodeCount)
      .fill(null)
      .map(() => Array(nodeCount).fill(Infinity)); //–º–∞—Ç—Ä–∏—Ü–∞ –∏–∑ Infinity
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø—É—Ç–µ–π, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É–∑–ª–∞—Ö –Ω–∞ –ø—É—Ç–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ —É–∑–ª–∞ –∫ –¥—Ä—É–≥–æ–º—É.
    const next = Array(nodeCount)
      .fill(null)
      .map(() => Array(nodeCount).fill(null)); //–º–∞—Ç—Ä–∏—Ü–∞ –∏–∑ null
    let debugLog = '';

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –≥—Ä–∞—Ñ–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ –¥–æ —Å–∞–º–æ–≥–æ —Å–µ–±—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ 0,
    // –∞ –ø—É—Ç—å –∏–∑ —É–∑–ª–∞ –≤ –Ω–µ–≥–æ —Å–∞–º–æ–≥–æ —Ä–∞–≤–µ–Ω –µ–≥–æ ID. –≠—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ç–ª–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å).
    nodes.forEach((node, i) => {
      distances[i][i] = 0;
      next[i][i] = node.id;
    });

    edges.forEach((edge) => {
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±—Ä–∞ –º—ã –Ω–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏ —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞.
      const sourceIndex = nodes.findIndex((n) => n.id === edge.source);
      const targetIndex = nodes.findIndex((n) => n.id === edge.target);
      const weight = parseFloat(edge.label as string);
      // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤ —Ä—ë–±–µ—Ä –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —É–∑–ª–µ –Ω–∞ –ø—É—Ç–∏ –≤ –º–∞—Ç—Ä–∏—Ü—É –ø—É—Ç–µ–π.
      distances[sourceIndex][targetIndex] = weight;
      next[sourceIndex][targetIndex] = nodes[targetIndex].id;
    });

    const debugNext = next.map((row) => row.map((cell) => (cell === null ? 'Null' : cell)));

    // console.log(
    //   '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã: \n',
    //   `–ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: \n${distances.map((row) => row.join(' ')).join('\n')}\n\n`,
    //   `–ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–µ–π:\n${debugNext.map((row) => Array.from(row).map((item) => getNodeLabeForPath(item))).join(' \n')}\n`
    // );
    debugLog += '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã: \n';
    debugLog += `–ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: ${JSON.stringify(distances)}\n`;
    debugLog += `–ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–µ–π: ${JSON.stringify(next)}\n`;

    //  –≠—Ç–æ—Ç —Ü–∏–∫–ª –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —É–∑–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —É–ª—É—á—à–∏—Ç—å –ø—É—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —É–∑–ª–∞–º–∏ —á–µ—Ä–µ–∑ —Ç—Ä–µ—Ç–∏–π —É–∑–µ–ª.
    for (let k = 0; k < nodeCount; k++) {
      // –≠—Ç–æ—Ç —Ü–∏–∫–ª –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —É–∑–ª—ã –≥—Ä–∞—Ñ–∞.
      //  –£–∑–µ–ª —Å –∏–Ω–¥–µ–∫—Å–æ–º k –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —É–∑–µ–ª –Ω–∞ –ø—É—Ç–∏ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–∏ —É–∑–ª–æ–≤.
      //  –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–≥—É—Ç –ø—Ä–æ–π—Ç–∏ –ø—É—Ç–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ i –∏ j
      for (let i = 0; i < nodeCount; i++) {
        // –≠—Ç–æ—Ç —Ü–∏–∫–ª –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω—ã–µ —É–∑–ª—ã ùëñ
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ ùëñ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏ —É–ª—É—á—à–∏—Ç—å –ø—É—Ç—å –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞ j —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —É–∑–µ–ª ùëò
        for (let j = 0; j < nodeCount; j++) {
          // –≠—Ç–æ—Ç —Ü–∏–∫–ª –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–µ–ª–µ–≤—ã–µ —É–∑–ª—ã j. –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã —É–∑–ª–æ–≤ i –∏ j, –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ —É–ª—É—á—à–∏—Ç—å –∏—Ö –ø—É—Ç—å —á–µ—Ä–µ–∑ —É–∑–µ–ª k
          // console.log(distances[i][j], distances[i][k] + distances[k][j]);
          if (distances[i][j] > distances[i][k] + distances[k][j]) {
            // –ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø—É—Ç—å –æ—Ç —É–∑–ª–∞ i –¥–æ —É–∑–ª–∞ j —á–µ—Ä–µ–∑ —É–∑–µ–ª k.
            distances[i][j] = distances[i][k] + distances[k][j];
            // –ù–∞—à–ª–∏ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—É—Ç—å —á–µ—Ä–µ–∑ k
            next[i][j] = next[i][k];
            // –û–±–Ω–æ–≤–∏–º —ç—Ç–æ—Ç –ø—É—Ç—å
            // console.log(
            //   `–û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –ø–∞—Ä (${nodes[i].data.label}, ${nodes[j].data.label}): —á–µ—Ä–µ–∑ ${nodes[k].data.label} —Å –≤–µ—Å–æ–º ${distances[i][j]}\n`
            // );
          }
        }
      }
    }

    return { distances, next, debugString: debugLog };
  };

  const findFloydPath = (
    startNodeId: string,
    endNodeId: string
  ): { path: string[]; totalWeight: number; debugString: string } => {
    const { distances, next, debugString } = floydWarshall();
    const startIndex = nodes.findIndex((node) => node.id === startNodeId);
    const endIndex = nodes.findIndex((node) => node.id === endNodeId);

    const path = [];
    let currentIndex = startIndex;

    if (next[startIndex][endIndex] === null) {
      alert('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ —ç—Ç–∏–º –Ω–æ–¥–∞–º');
      return { path: [], totalWeight: 0, debugString: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.' };
    }

    while (currentIndex !== endIndex) {
      path.push(nodes[currentIndex].id);
      currentIndex = nodes.findIndex((n) => n.id === next[currentIndex][endIndex]);
    }
    path.push(endNodeId);

    highlightPathEdges(path, 'floyd'); // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—É—Ç—å –∫—Ä–∞—Å–Ω—ã–º

    const finalDebug = `–ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –æ—Ç ${nodes[startIndex].data.label} –¥–æ ${nodes[endIndex].data.label}: ${path.map((nodeId) => nodes.find((n) => n.id === nodeId)?.data.label).join(' ‚Üí ')} —Å –æ–±—â–∏–º –≤–µ—Å–æ–º: ${distances[startIndex][endIndex]}`;
    // console.log(finalDebug);

    return {
      path,
      totalWeight: distances[startIndex][endIndex],
      debugString: `${debugString}\n${finalDebug}`
    };
  };

  return { findFloydPath, floydWarshall };
};
